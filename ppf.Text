THE FOLLOWING PRESENTATION HAS BEEN MODIFIED FROM ITS 
ORIGINAL FORMAT TO FIT THE CONSTRAINTS OF PRESENT-DAY
COGNITION.






THIS IS A SHORT FILM ABOUT A REALTIME FRACTAL-VOXEL RAYTRACER. 
ANY RESEMBLANCE BETWEEN VOXELS DEPICTED HEREIN AND ACTUAL
VOXELS LIVING OR DEAD IS PURELY COINCIDENTAL AND NOT WORTH 
WORRYING ABOUT. 



RESOLVED: TRACING WILL DISPLACE RASTERIZATION. DISCUSS.


JJ GIBSON ON THE ECOLOGICAL APPROACH TO VISUAL PERCEPTION

TEXTURE AND GEOMETRY

TOY WORLD RENDERERS: LANDSCAPE MODELS

SECOND LIFE

horribly ugly mesh landscape 

polygonal and mesh objects

baroque UI with object crafting and scripting

tunneling and mining essentially impossible
C++/opengl

MINECRAFT

procedurally generated block landscape 

polygonal and textured flat polygon objects 

interaction with blocks: destruction, creation

no inworld creation of nonblock objects

no inworld scripting

tunneling-friendly renderer

chunk meshing algorithm extracts potentially visible air-solid boundaries as meshes

not a tracer

Java/lwjgl/opengl

XENOXOLOTL

fractal-voxel tracer

nested voxels (blocks)

2*2*2 vs 3*3*3 recursive division of space

Oberon/opengl

mirrors, translucent color, sierpinski cubes, huge cubes, small cubes, very very small cubes

space as a page 

frep objects frasterized into mspace

THANK YOU FOR YOUR EXTRAORDINARY PATIENCE! NOW TO THE EAGERLY AWAITED CODE!

TYPE Ray* = RECORD
	xyz*, dxyz*, ddxyz*, lxyz*, origin*, oxyz*, popdelta*: PT;	
	cellred*,cellgreen*,cellblue*,cellblack*: REAL;
	r*, g*, b*, ra*, ga*, ba*, bla*: REAL;
	terminate*: BOOLEAN;
	i*, j*, k*: INTEGER;
	scale*: REAL;
	length*: REAL; 
	di*,dj*,dk*: BOOLEAN;
	changed*: BOOLEAN; 
	face*: INTEGER;
	mirrortf*:BOOLEAN;	
	terminalvoxel*: Voxel; 
	normal*,bloxnorm*: PT;  
	normalTF*: BOOLEAN;
	corner*:PT;
	dtl*: LONGINT;	
END; 

TYPE Voxel*=OBJECT
VAR
	complex*, passable*: BOOLEAN;
	imposter*: Voxel;
	lockTF*,copymarker*: BOOLEAN;
	DTL*: REAL;
	code*:Name;
	
PROCEDURE Shade*(VAR ray: Ray);
END Shade;
...
END Voxel;

COLORED CUBE

TYPE ColoredVox* = OBJECT(Voxel);
VAR
	r, g, b: REAL;
PROCEDURE setcolor* (red, green, blue : REAL);
BEGIN
	r :=red ;
	g := green;
	b := blue;
END setcolor;
PROCEDURE Shade (VAR ray: Ray);
BEGIN
	ray.r := ray.r + r*ray.ra;
	ray.g := ray.g + g*ray.ga;
	ray.b := ray.b + b*ray.ba;
	ray.terminate := TRUE;
END Shade;
END ColoredVox;

MIRROR CUBE

TYPE DiffuseMVox* = OBJECT(Voxel);
VAR
	r, g, b, mf, a: REAL;
PROCEDURE Shade (VAR ray: Ray);
VAR 
	nx, ny, nz: INTEGER;
	dot,d: REAL;
	inside: BOOLEAN;
BEGIN
	CASE ray.face OF
		0: inside := TRUE
		|1: nx := -1
		|2: ny := -1
		|3: nz := -1
		|4: nx := 1
		|5: ny := 1
		|6: nz := 1
	ELSE
	END;
	IF inside THEN dot := 0 ELSE d := (nx*ray.dxyz.x + ny*ray.dxyz.y+ nz*ray.dxyz.z); dot := d*(1/2-ray.lxyz.x) END;
	ray.ra := ray.ra- 0.1; 
	ray.ga := ray.ga- 0.1; 
	ray.ba := ray.ba- 0.1; 
	mirror(ray);
END Shade;
END DiffuseMVox;

PROCEDURE mirror(VAR ray: Ray);
BEGIN
	reflect(ray.dxyz, ray.normal);	
	IF ray.dxyz.x < 0 THEN ray.di := FALSE  ELSE ray.di := TRUE END; 
	IF ray.dxyz.y < 0 THEN ray.dj := FALSE  ELSE ray.dj := TRUE END;
	IF ray.dxyz.z < 0 THEN ray.dk := FALSE  ELSE ray.dk := TRUE END;	
	ray.changed := TRUE;
	ray.mirrortf:=TRUE
END mirror;


M3SPACE

MODULE XNXLM3Space;
IMPORT Base:=XNXLBase, XNXLE, XNXLFRep, Math, Out := KernelLog, Streams,Strings;

CONST M=3;
	MMO=M-1;
	CUBERADIUS=0.86;   (*change to sqrt(3)/2 ???*)
	NL=Base.NL;

TYPE PT = Base.PT;
	Color = Base.COLOR;
	Ray = Base.Ray;
	Voxel = Base.Voxel;
	FR = Base.FR;
	Name = Base.Name;

TYPE NCube=Base.NCube;

TYPE cell* = OBJECT(Base.Cell);
VAR
	blox*: ARRAY M,M,M OF Voxel;;
	probelock*:BOOLEAN;

PROCEDURE Shade (VAR ray: Ray);
VAR
	pushxyz, newxyz, xyz: Base.PT;
	ijk: Base.IPT;
	drx, dry, drz, dr,rr,gr,br,blr,bla: REAL;
	scaleInv:REAL;
	out,shadenil,A,B,C: BOOLEAN;
	v: Voxel;
	vdepth,vd2: REAL;
	last:BOOLEAN;
BEGIN
	ray.scale := ray.scale*M;
	scaleInv := 1/ray.scale;
	xyz.x := ray.lxyz.x * M  - ray.ddxyz.x;  (* ray.lxyz could be renamed to ray.pushxyz *)
	xyz.y := ray.lxyz.y * M  - ray.ddxyz.y;		
	xyz.z := ray.lxyz.z * M  - ray.ddxyz.z; 
	IF (ray.length*ray.scale>ray.dtl) THEN
		IF imposter#NIL THEN
			imposter.Shade(ray)	
		END
	ELSE		
	pushxyz:=xyz;
	XNXLE.E(xyz,ijk);
	bounds(ijk.i,ijk.j,ijk.k,out);
	IF ~out THEN
		v:= blox[ijk.i,ijk.j,ijk.k];
		IF (v#NIL) THEN
			ray.lxyz.x := ABS(xyz.x - ijk.i);  
			ray.lxyz.y := ABS(xyz.y - ijk.j);
			ray.lxyz.z := ABS(xyz.z - ijk.k);
			ray.popdelta := Base.Origin; 
			v.Shade(ray);					
			xyz.x := xyz.x + ray.popdelta.x;    
			xyz.y := xyz.y + ray.popdelta.y;
			xyz.z := xyz.z + ray.popdelta.z;
		END
	END;	 
	IF (ray.ra<0.1)&(ray.ga<0.1)&(ray.ba<0.1) THEN ray.terminate:=TRUE END;	
	IF ~ray.terminate THEN
		REPEAT
			IF ray.di  THEN
				drx := ( (ijk.i + 1) - xyz.x) / ray.dxyz.x
			ELSE
				drx :=  (ijk.i -  xyz.x) / ray.dxyz.x
			END;
			IF ray.dj THEN
				dry := ( (ijk.j + 1) - xyz.y) / ray.dxyz.y
			ELSE
				dry :=  (ijk.j - xyz.y) / ray.dxyz.y
			END;
			IF ray.dk  THEN
				drz := ( (ijk.k + 1) - xyz.z) / ray.dxyz.z
			ELSE
				drz :=  (ijk.k - xyz.z) / ray.dxyz.z
			END;
			A:=drx<dry; B:=drx<drz; C:=dry<drz;	
			IF A&B THEN
				dr := drx;
				IF ray.di THEN 
					INC(ijk.i, 1);
					ray.face := 1; ray.normal:= Base.Face[0] 
				ELSE 
					INC(ijk.i, -1);
					ray.face := 4; ray.normal:= Base.Face[3] 
				END;
				newxyz.x := xyz.x + drx * ray.dxyz.x; newxyz.y := xyz.y + drx * ray.dxyz.y; newxyz.z  := xyz.z + drx * ray.dxyz.z	
			ELSIF A&~B THEN
				dr := drz;
				IF ray.dk THEN 
					INC(ijk.k, 1);
					ray.face := 3; ray.normal:= Base.Face[2] 
				ELSE
					INC(ijk.k, -1);
					ray.face := 6; ray.normal:= Base.Face[5]
				END;
				newxyz.x := xyz.x + drz * ray.dxyz.x; newxyz.y := xyz.y + drz * ray.dxyz.y; newxyz.z  := xyz.z + drz * ray.dxyz.z
			ELSIF C THEN
				dr := dry;
				IF ray.dj THEN 
					INC(ijk.j, 1);
					ray.face := 2; ray.normal:= Base.Face[1] 
				ELSE 
					INC(ijk.j, -1);
					ray.face := 5; ray.normal:= Base.Face[4] 
				END;
				newxyz.x := xyz.x + dry * ray.dxyz.x; newxyz.y := xyz.y + dry * ray.dxyz.y; newxyz.z  := xyz.z+ dry * ray.dxyz.z
			ELSE
				dr := drz;		
				IF ray.dk  THEN 
					INC(ijk.k, 1);
					ray.face := 3; ray.normal:= Base.Face[2] 
				ELSE
					INC(ijk.k, -1);
					ray.face := 6; ray.normal:= Base.Face[5]
				END;
				newxyz.x := xyz.x + drz * ray.dxyz.x; newxyz.y := xyz.y + drz * ray.dxyz.y; newxyz.z  := xyz.z + drz * ray.dxyz.z
			END;
			vdepth:=Base.dist(newxyz,xyz)*scaleInv;
			vd2:=Math.sqrt(vdepth);
			ray.xyz.x:=ray.xyz.x +((newxyz.x-xyz.x)+ray.ddxyz.x)*scaleInv;
			ray.xyz.y:=ray.xyz.y +((newxyz.y-xyz.y)+ray.ddxyz.y)*scaleInv;			
			ray.xyz.z:=ray.xyz.z +((newxyz.z-xyz.z)+ray.ddxyz.z)*scaleInv;			
			xyz:=newxyz;
			ray.length:=ray.length+vdepth;
			rr := red*vd2*ray.ra; gr := green*vd2*ray.ga; br := blue*vd2*ray.ba; blr:=black*vd2; bla:=alpha*vd2;
			ray.r := ray.r+rr;
			ray.g:= ray.g+gr;
			ray.b := ray.b+br; 
			ray.ra := (ray.ra-rr)-blr;
			ray.ga := (ray.ga-gr)-blr;
			ray.ba := (ray.ba-br)-blr; 	
			ray.bla := ray.bla-bla; 		
			IF ray.bla>0.01 THEN	
				bounds(ijk.i,ijk.j,ijk.k, out);
				IF ~out  THEN
					IF (ray.length*ray.scale>ray.dtl) THEN
							v:=imposter
					ELSE	
						v:= blox[ijk.i,ijk.j,ijk.k]
					END;	
					v := blox[ijk.i,ijk.j,ijk.k];						
					IF (v#NIL) THEN
						ray.lxyz.x := ABS(xyz.x - ijk.i);  
						ray.lxyz.y := ABS(xyz.y - ijk.j);
						ray.lxyz.z := ABS(xyz.z - ijk.k);
						ray.popdelta := Base.Origin; (* because many shaders don't set it and it *)
						v.Shade(ray);					(* must be (0,0,0) in that case       *)
						xyz.x := xyz.x + ray.popdelta.x;    
						xyz.y := xyz.y + ray.popdelta.y;
						xyz.z := xyz.z + ray.popdelta.z;	
					END
				END
			END;
		IF (ray.bla<0.01) OR ((ray.ra<0.01)&(ray.ga<0.01)&(ray.ba<0.01)) THEN ray.terminate:=TRUE END; 
		UNTIL  out OR ray.terminate;
	END 	
	END;
	ray.popdelta.x := (xyz.x-pushxyz.x)/M;
	ray.popdelta.y := (xyz.y-pushxyz.y)/M;
	ray.popdelta.z := (xyz.z-pushxyz.z)/M;
	ray.scale := ray.scale/M;
END Shade;
...
END cell;
...
END XNXLM3Space.
